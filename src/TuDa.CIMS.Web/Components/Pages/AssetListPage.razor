@page "/asset-list"
@using TuDa.CIMS.Shared.Dtos
@using TuDa.CIMS.Shared.Entities
@using TuDa.CIMS.Web.Components.Dashboard
@using TuDa.CIMS.Web.Components.Dashboard.Dialogs
@using TuDa.CIMS.Web.Services

<div class="container-fluid ">
    <div class="row mt-5">
        <AssetList AddButtonPressed="CreateAssetItem"
                   EditButtonPressed="EditAssetItem"
                   @ref="_assetList"/>
    </div>
</div>

@code
{
    private AssetList _assetList = null!;

    private readonly ILogger<AssetListPage> _logger;
    private readonly IDialogService _dialogService;
    private readonly IAssetItemApi _assetItemApi;

    public AssetListPage(
        IAssetItemApi assetItemApi,
        IDialogService dialogService,
        ILogger<AssetListPage> logger
    )
    {
        _assetItemApi = assetItemApi;
        _dialogService = dialogService;
        _logger = logger;
    }

    private async Task CreateAssetItem()
    {
        _logger.LogInformation("Added");
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "OnItemCreated", EventCallback.Factory.Create<CreateAssetItemDto>(this, CreateItem) }
        };
        await _dialogService.ShowAsync<AssetItemDialog>("Create Item", options);
    }


    private async Task EditAssetItem(AssetItem assetItem)
    {
        _logger.LogInformation("Edit {Item.Name}", assetItem.Name);
        var parameters = new DialogParameters<AssetItemEditDialog>
        {
            { "Item", assetItem },
            { "OnDeleteRequested", EventCallback.Factory.Create<AssetItem>(this, DeleteItem) }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        await _dialogService.ShowAsync<AssetItemEditDialog>("Edit Item", parameters, options);
    }

    private async Task CreateItem(CreateAssetItemDto createAssetItemDto)
    {
        await _assetItemApi.CreateAsync(createAssetItemDto);
        await _assetList.ReloadData();
    }

    private async Task DeleteItem(AssetItem assetItem)
    {
        await _assetItemApi.RemoveAsync(assetItem.Id);
        await _assetList.ReloadData();
    }

}
