@using TuDa.CIMS.Shared.Entities
@using TuDa.CIMS.Shared.Entities.Enums

@* Substance Item Form *@


<MudForm>
    <MudTextField @bind-Value="FormCas"
                  Label="CAS"
                  Placeholder="CAS eingeben"
                  Variant="Variant.Filled"
                  FullWidth/>

    <MudTextField @bind-Value="FormPurity"
                  Label="Reinheit"
                  Placeholder="Reinheit eingeben"
                  Variant="Variant.Filled"
                  FullWidth/>

    <MudNumericField @bind-Value="FormBindingSize"
                     Label="Größe des Gebindes"
                     Placeholder="Gebindengröße eingeben"
                     Variant="Variant.Filled"
                     FullWidth/>

    <!-- MudSelect for selecting measurement unit -->
    <MudSelect @bind-Value="FormPriceUnit"
               Label="Preis Einheit wählen"
               Error="@IsError"
               ErrorText="Preiseinheit fehlt!"
               Variant="Variant.Filled"
               FullWidth>
        <MudSelectItem Value="MeasurementUnits.Unitless">-</MudSelectItem>
        <MudSelectItem Value="MeasurementUnits.Gram">Gramm</MudSelectItem>
        <MudSelectItem Value="MeasurementUnits.KiloGram">Kilogramm</MudSelectItem>
        <MudSelectItem Value="MeasurementUnits.MilliLiter">Milliliter</MudSelectItem>
        <MudSelectItem Value="MeasurementUnits.Liter">Liter</MudSelectItem>
        <MudSelectItem Value="MeasurementUnits.Piece">Stück</MudSelectItem>
    </MudSelect>
</MudForm>

@code
{
    /// <summary>
    /// Input Fields
    /// </summary>
    public MeasurementUnits FormPriceUnit { get; private set; }
    public string FormCas { get; private set; } = string.Empty;
    public string FormPurity { get; private set; } = string.Empty;
    public double FormBindingSize { get; private set; }


    [Parameter] public bool FormShowError { get; set; }

    private bool IsError => FormPriceUnit == MeasurementUnits.Unitless && FormShowError;


    public void SetForm(Chemical item)
    {
        FormCas = item.Cas;
        FormPurity = item.Purity;
        FormBindingSize = item.BindingSize;
        FormPriceUnit = item.PriceUnit;
    }


    /// <summary>
    /// Validate the Inputs
    /// </summary>
    /// <returns>returns false when all Inputs are valid otherwise true</returns>
    public bool ValidateForm()
    {
        if (
            FormCas == string.Empty
            || FormBindingSize == 0.0
            || FormPurity == string.Empty
        )
        {
            FormShowError = true;
            return true;
        }

        return false;
    }

    [Parameter] public EventCallback OnReset { get; set; }

    /// <summary>
    /// Resets the Input lines
    /// </summary>
    public void ResetInputs()
    {
        FormCas = string.Empty;
        FormPurity = string.Empty;
        FormBindingSize = 0.0;
        OnReset.InvokeAsync();
    }

}
