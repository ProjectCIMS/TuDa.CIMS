using Refit;
using TuDa.CIMS.Shared.Attributes.ServiceRegistration;
using TuDa.CIMS.Shared.Dtos;
using TuDa.CIMS.Shared.Entities;
using TuDa.CIMS.Web.Extensions;

namespace TuDa.CIMS.Web.Services;

/// <summary>
/// Refit client interface for performing operations on Students.
/// </summary>
[RefitClient("/api/working-groups")]
public interface IStudentApi
{
    /// <summary>
    /// Removes a Student from a Working Group by its unique identifier.
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group.</param>
    /// <param name="id">The unique identifier of the Student to remove.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the deletion.
    /// </returns>
    public async Task<ErrorOr<WorkingGroup>> RemoveAsync(Guid workingGroupId, Guid id) =>
        await RemoveAsyncInternal(workingGroupId, id).ToErrorOrAsync<WorkingGroup>();

    /// <summary>
    /// Internal method to remove a Student from a Working Group by its unique identifier.
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group.</param>
    /// <param name="id">The unique identifier of the Student to remove.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Delete("/{workingGroupId}/students/{id}")]
    protected Task<IApiResponse<WorkingGroup>> RemoveAsyncInternal(Guid workingGroupId, Guid id);

    /// <summary>
    /// Adds a Student to a Working Group by its unique identifier.
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group.</param>
    /// <param name="createModel">Model to create a Student if needed</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the deletion.
    /// </returns>
    public async Task<ErrorOr<WorkingGroup>> AddAsync(
        Guid workingGroupId,
        CreateStudentDto createModel
    ) => await AddAsyncInternal(workingGroupId, createModel).ToErrorOrAsync<WorkingGroup>();

    /// <summary>
    /// Internal method to add a Student to a Working Group by its unique identifier.
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group.</param>
    /// <param name="createModel">The createStudentDto</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Post("/{workingGroupId}/students")]
    protected Task<IApiResponse<WorkingGroup>> AddAsyncInternal(
        Guid workingGroupId,
        CreateStudentDto createModel
    );

    /// <summary>
    /// Updates an existing Student
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group</param>
    /// <param name="id">The unique identifier of the Student to update.</param>
    /// <param name="updateModel">The updateStudentDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the update success.
    /// </returns>
    public async Task<ErrorOr<WorkingGroup>> UpdateAsync(
        Guid workingGroupId,
        Guid id,
        UpdateStudentDto updateModel
    ) => await UpdateAsyncInternal(workingGroupId, id, updateModel).ToErrorOrAsync<WorkingGroup>();

    /// <summary>
    /// Internal method to update an existing Student.
    /// </summary>
    /// <param name="workingGroupId">The unique identifier of the Working Group</param>
    /// <param name="id">The unique identifier of the Student to update.</param>
    /// <param name="updateModel">The updatedStudentDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Patch("/{workingGroupId}/students/{id}")]
    protected Task<IApiResponse<WorkingGroup>> UpdateAsyncInternal(
        Guid workingGroupId,
        Guid id,
        UpdateStudentDto updateModel
    );
}
