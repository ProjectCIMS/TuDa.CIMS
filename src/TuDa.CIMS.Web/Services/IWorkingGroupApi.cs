using Refit;
using TuDa.CIMS.Shared.Attributes.ServiceRegistration;
using TuDa.CIMS.Shared.Dtos;
using TuDa.CIMS.Shared.Dtos.Responses;
using TuDa.CIMS.Web.Extensions;

namespace TuDa.CIMS.Web.Services;

/// <summary>
/// Refit client interface for performing operations on WorkingGroups.
/// </summary>
[RefitClient("/api/working-groups")]
public interface IWorkingGroupApi
{
    /// <summary>
    /// Retrieves a Working Group by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing the Working Group if successful.
    /// </returns>
    public async Task<ErrorOr<WorkingGroupResponseDto>> GetAsync(Guid id) =>
        await GetAsyncInternal(id).ToErrorOrAsync();

    /// <summary>
    /// Internal method to retrieve a Working Group by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing the WorkingGroup.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Get("/{id}")]
    protected Task<IApiResponse<WorkingGroupResponseDto>> GetAsyncInternal(Guid id);

    /// <summary>
    /// Retrieves all Working Groups.
    /// </summary>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing an IEnumerable of Working Groups if successful.
    /// </returns>
    public async Task<ErrorOr<IEnumerable<WorkingGroupResponseDto>>> GetAllAsync(
        string? name = null
    ) => await GetAllAsyncInternal(name).ToErrorOrAsync();

    /// <summary>
    /// Internal method to retrieve all Working Groups.
    /// </summary>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing an IEnumerable of Working Groups.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Get("/")]
    protected Task<IApiResponse<IEnumerable<WorkingGroupResponseDto>>> GetAllAsyncInternal(
        [Query] string? name
    );

    /// <summary>
    /// Creates a new Working Group.
    /// </summary>
    /// <param name="createModel">The model containing the updated values for the Working Group.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing the unique identifier of the created Working Group if successful.
    /// </returns>
    public async Task<ErrorOr<WorkingGroupResponseDto>> CreateAsync(
        CreateWorkingGroupDto createModel
    ) => await CreateAsyncInternal(createModel).ToErrorOrAsync();

    /// <summary>
    /// Internal method to create a new Working Group.
    /// </summary>
    /// <param name="item">The JSON serialized representation of the Working Group.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing the unique identifier of the created Working Group.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Post("/")]
    protected Task<IApiResponse<WorkingGroupResponseDto>> CreateAsyncInternal(
        [Body] CreateWorkingGroupDto item
    );

    /// <summary>
    /// Removes a Working Group by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group to remove.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the deletion.
    /// </returns>
    public async Task<ErrorOr<Deleted>> RemoveAsync(Guid id) =>
        await RemoveAsyncInternal(id).ToErrorOrAsync<Deleted>();

    /// <summary>
    /// Internal method to remove a Working Group by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group to remove.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Delete("/{id}")]
    protected Task<IApiResponse> RemoveAsyncInternal(Guid id);

    /// <summary>
    /// Updates an existing Working Group.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group to update.</param>
    /// <param name="updateWorkingGroupDto">The updateWorkingGroupDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the update success.
    /// </returns>
    public async Task<ErrorOr<WorkingGroupResponseDto>> UpdateAsync(
        Guid id,
        UpdateWorkingGroupDto updateWorkingGroupDto
    ) => await UpdateAsyncInternal(id, updateWorkingGroupDto).ToErrorOrAsync();

    /// <summary>
    /// Internal method to update an existing Working Group.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group to update.</param>
    /// <param name="updateWorkingGroupDto">The JSON serialized representation of the updatedWorkingGroupDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Patch("/{id}")]
    protected Task<IApiResponse<WorkingGroupResponseDto>> UpdateAsyncInternal(
        Guid id,
        [Body] UpdateWorkingGroupDto updateWorkingGroupDto
    );

    /// <summary>
    /// Toggles the active status of a Working Group.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group.</param>
    /// <returns></returns>
    public async Task<ErrorOr<Success>> ToggleActiveAsync(Guid id) =>
        await ToggleActiveAsyncInternal(id).ToErrorOrAsync<Success>();

    /// <summary>
    /// Internal method to toggle the active status of a Working Group.
    /// </summary>
    /// <param name="id">The unique identifier of the Working Group.</param>
    /// <returns></returns>
    [Patch("/{id}/toggle")]
    protected Task<IApiResponse> ToggleActiveAsyncInternal(Guid id);
}
