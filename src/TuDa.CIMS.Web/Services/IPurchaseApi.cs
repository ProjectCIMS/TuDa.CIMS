﻿using Refit;
using TuDa.CIMS.Shared.Attributes.ServiceRegistration;
using TuDa.CIMS.Shared.Entities;
using TuDa.CIMS.Web.Extensions;
using TuDa.CIMS.Shared.Dtos;


namespace TuDa.CIMS.Web.Services;

/// <summary>
/// Refit client interface for the purchase API.
/// </summary>
[RefitClient("/api/purchase")]
public interface IPurchaseApi
{
    /// <summary>
    /// Retrives a purchase with the specified id.
    /// </summary>
    /// <param name="id"> the unique identifier of the purchase</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <returns>
    /// A task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing the purchase if successful
    /// </returns>
    public async Task<ErrorOr<Purchase>> GetAsync(Guid id, Guid workingGroupId) => await GetAsyncInternal(id, workingGroupId).ToErrorOrAsync();

    /// <summary>
    /// Internal method to retrieve a purchase by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the purchase.</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing the Purchase.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Get("/{id}/{workingGroupId}")]
    protected Task<IApiResponse<Purchase>> GetAsyncInternal(Guid id, Guid workingGroupId);

    /// <summary>
    /// Retrieves all purchases.
    /// </summary>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing an IEnumerable of purchases if successful.
    /// </returns>
    public async Task<ErrorOr<IEnumerable<Purchase>>> GetAllAsync(Guid workingGroupId) => await GetAllAsyncInternal(workingGroupId).ToErrorOrAsync();

    /// <summary>
    /// Internal method to retrieve all purchases.
    /// </summary>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing an IEnumerable of purchases.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Get("/{workingGroupId}")]
    protected Task<IApiResponse<IEnumerable<Purchase>>> GetAllAsyncInternal(Guid workingGroupId);

    /// <summary>
    /// Creates a new purchase.
    /// </summary>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <param name="item">The purchase to create.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing the unique identifier of the created purchase if successful.
    /// </returns>
    public async Task<ErrorOr<Guid>> CreateAsync(Guid workingGroupId, Purchase item) =>
        await CreateAsyncInternal(workingGroupId, item.ToString()).ToErrorOrAsync();

    /// <summary>
    /// Internal method to create a new purchase.
    /// </summary>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <param name="item">The JSON serialized representation of the purchase.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse{T}"/> containing the unique identifier of the created purchase.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Post("/")]
    [Get("/{workingGroupId}")]
    protected Task<IApiResponse<Guid>> CreateAsyncInternal(Guid workingGroupId, [Body] string item);

    /// <summary>
    /// Updates an existing purchase.
    /// </summary>
    /// <param name="id">The unique identifier of the purchase to update.</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <param name="updatePurchaseDto">The updatePurchaseDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the update success.
    /// </returns>
    public async Task<ErrorOr<Updated>> UpdateAsync(Guid id, Guid workingGroupId, UpdatePurchaseDto updatePurchaseDto) =>
        await UpdateAsyncInternal(id, workingGroupId, updatePurchaseDto.ToString()).ToErrorOrAsync();

    /// <summary>
    /// Internal method to update an existing purchase.
    /// </summary>
    /// <param name="id">The unique identifier of the purchase to update.</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <param name="updatePurchaseDto">The JSON serialized representation of the updatedPurchaseDto.</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Patch("/{id}")]
    [Get("/{workingGroupId}")]
    protected Task<IApiResponse<Updated>> UpdateAsyncInternal(Guid id, Guid workingGroupId, [Body] string updatePurchaseDto);

    /// <summary>
    /// Removes a purchase by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the purchase to remove.</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="ErrorOr{T}"/> containing a status indicating the deletion.
    /// </returns>
    public async Task<ErrorOr<Deleted>> RemoveAsync(Guid id, Guid workingGroupId) => await RemoveAsyncInternal(id, workingGroupId).ToErrorOrAsync<Deleted>();

    /// <summary>
    /// Internal method to remove a purchase by its unique identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the purchase to remove.</param>
    /// <param name="workingGroupId">the specific ID of a workinggroup</param>
    /// <returns>
    /// A Task representing the asynchronous operation, with a result of <see cref="IApiResponse"/>.
    /// </returns>
    /// <remarks>This will be generated by <see cref="Refit"/>.</remarks>
    [Delete("/{id}")]
    [Get("/{workingGroupId}")]
    protected Task<IApiResponse> RemoveAsyncInternal(Guid id, Guid workingGroupId);
}
